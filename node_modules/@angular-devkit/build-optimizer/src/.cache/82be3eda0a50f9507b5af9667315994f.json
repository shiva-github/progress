{"remainingRequest":"F:\\projects\\fireworks\\fire\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!F:\\projects\\fireworks\\fire\\node_modules\\ngx-qrcode2\\index.js","dependencies":[{"path":"F:\\projects\\fireworks\\fire\\node_modules\\ngx-qrcode2\\index.js","mtime":1520638476000},{"path":"F:\\projects\\fireworks\\fire\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1525594972000},{"path":"F:\\projects\\fireworks\\fire\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525421550000}],"contextDependencies":[],"result":["import { Component, Input, NgModule, Renderer2, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar QRCode = require('qrcode');\nvar NgxQRCodeComponent = /*@__PURE__*/ (function () {\n    function NgxQRCodeComponent(renderer) {\n        this.renderer = renderer;\n        this.elementType = 'url';\n        this.cssClass = 'qrcode';\n        this.value = 'https://www.techiediaries.com';\n        this.version = '';\n        this.errorCorrectionLevel = 'M';\n    }\n    /**\n     * @return {?}\n     */\n    NgxQRCodeComponent.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n        function () {\n            this.createQRCode();\n        };\n    /**\n     * @return {?}\n     */\n    NgxQRCodeComponent.prototype.toDataURL = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                QRCode.toDataURL(_this.value, { version: _this.version, errorCorrectionLevel: _this.errorCorrectionLevel }, function (err, url) {\n                    if (err) {\n                        console.error(err);\n                        reject(err);\n                    }\n                    else {\n                        //console.log(url);\n                        resolve(url);\n                    }\n                });\n            });\n        };\n    /**\n     * @param {?} canvas\n     * @return {?}\n     */\n    NgxQRCodeComponent.prototype.toCanvas = /**\n     * @param {?} canvas\n     * @return {?}\n     */\n        function (canvas) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                QRCode.toCanvas(canvas, _this.value, { version: _this.version, errorCorrectionLevel: _this.errorCorrectionLevel }, function (error) {\n                    if (error) {\n                        //console.error(error);\n                        reject(error);\n                    }\n                    else {\n                        //console.log('success!');\n                        resolve(\"success\");\n                    }\n                });\n            });\n        };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    NgxQRCodeComponent.prototype.renderElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n        function (element) {\n            for (var _i = 0, _a = this.qrcElement.nativeElement.childNodes; _i < _a.length; _i++) {\n                var node = _a[_i];\n                this.renderer.removeChild(this.qrcElement.nativeElement, node);\n            }\n            this.renderer.appendChild(this.qrcElement.nativeElement, element);\n        };\n    /**\n     * @return {?}\n     */\n    NgxQRCodeComponent.prototype.createQRCode = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.value) {\n                return;\n            }\n            var /** @type {?} */ element;\n            //console.log(\"QR Encoding \" + this.value);\n            switch (this.elementType) {\n                case 'canvas':\n                    element = this.renderer.createElement('canvas');\n                    this.toCanvas(element).then(function (v) {\n                        //console.log(v);\n                        //console.log(v);\n                        _this.renderElement(element);\n                    }).catch(function (e) {\n                        console.error(e);\n                    });\n                    break;\n                case 'url':\n                case 'img':\n                default:\n                    element = this.renderer.createElement('img');\n                    this.toDataURL().then(function (v) {\n                        //console.log(v);\n                        element.setAttribute(\"src\", v);\n                        _this.renderElement(element);\n                    }).catch(function (e) {\n                        console.error(e);\n                    });\n            }\n        };\n    return NgxQRCodeComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxQRCodeModule = /*@__PURE__*/ (function () {\n    function NgxQRCodeModule() {\n    }\n    /**\n     * @return {?}\n     */\n    NgxQRCodeModule.forRoot = /**\n     * @return {?}\n     */\n        function () {\n            return {\n                ngModule: NgxQRCodeModule,\n                providers: []\n            };\n        };\n    return NgxQRCodeModule;\n}());\nexport { NgxQRCodeModule, NgxQRCodeComponent };\n",null]}